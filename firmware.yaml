# ============================================================================
# MPPHA Dual MPPT - ESPHome Configuration
# ============================================================================
# Device: Solar Inverter with Dual MPPT
# Hardware: ESP32-S3-DevKitC-1
# Interface: UART to Voltronic Protocol
# 
# CHANGELOG:
# v1.2.0 - 2025-10-09
#   - Added dynamic log level control via select entity
#   - Added debug component and reset reason sensor
#   - Added min_version requirement (2025.5.0)
#   - Added on_boot action to set initial log level
#   - Added log_level_default substitution
#
# v1.1.0 - 2025-10-09
#   - Removed sync scripts completely
#   - Added direct comparison in on_value handlers
#   - Updates select only if sensor value differs
#   - Added entity categories (config/diagnostic) for Made for ESPHome compliance
#   - Added icons to all entities
#   - Organized code into logical sections
#   - Added comprehensive header documentation
#
# v1.0.0 - Initial release with dual MPPT support
# ============================================================================

# ============================================================================
# SUBSTITUTIONS
# ============================================================================
substitutions:
  name: "mpphadual"
  friendly_name: "MPPHA Dual"
  log_level_default: "INFO"
  ap_ssid: "${name} - Setup"
  ap_pass: "setup1234"
  project_name: "mchiriciuc.mppha-dual-mppt"
  project_version: "1.2.0"
  import_url: "github://mchiriciuc/mppha-dual-mppt/firmware.yaml@v1.2.0"

# ============================================================================
# DEVICE CONFIGURATION
# ============================================================================
esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: true
  min_version: 2025.5.0
  project:
    name: ${project_name}
    version: ${project_version}
  on_boot:
    - logger.set_level:
        level: ${log_level_default}

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "10"

# ============================================================================
# EXTERNAL COMPONENTS
# ============================================================================
external_components:
  - source: github://syssi/esphome-pipsolar@pip8048
    refresh: 0s

# ============================================================================
# LOGGING
# ============================================================================
logger:
  level: VERY_VERBOSE

# ============================================================================
# DEBUGGING
# ============================================================================
debug:

# ============================================================================
# NETWORK CONFIGURATION
# ============================================================================
api:

ota:
  platform: esphome

dashboard_import:
  package_import_url: ${import_url}
  import_full_config: false

wifi:
  ap:
    ssid: ${ap_ssid}
    password: ${ap_pass}

captive_portal:

esp32_improv:
  authorizer: none

web_server:
  port: 80
  log: on
  version: 3
  local: true

# ============================================================================
# UART CONFIGURATION
# ============================================================================
uart:
  - id: uart_bus
    tx_pin: GPIO6
    rx_pin: GPIO7
    baud_rate: 2400

pipsolar:
  - uart_id: uart_bus
    id: inverter0

# ============================================================================
# BUTTONS
# ============================================================================
button:
  - platform: restart
    name: Restart
    entity_category: config
    icon: mdi:restart

# ============================================================================
# SENSORS (Diagnostic)
# ============================================================================
sensor:
  - platform: pipsolar
    pipsolar_id: inverter0

    # Grid measurements
    grid_voltage:
      name: Grid voltage
      entity_category: diagnostic
      icon: mdi:transmission-tower
    grid_frequency:
      name: Grid frequency
      entity_category: diagnostic
      icon: mdi:sine-wave

    # Internal measurements
    bus_voltage:
      name: Bus voltage
      entity_category: diagnostic
      icon: mdi:flash
    inverter_heat_sink_temperature:
      name: Heat sink temperature
      entity_category: diagnostic
      icon: mdi:thermometer

    # PV1 MPPT
    pv1_input_voltage:
      name: PV1 voltage
      entity_category: diagnostic
      icon: mdi:solar-panel
    pv1_input_current:
      name: PV1 current
      entity_category: diagnostic
      icon: mdi:current-dc
    pv1_charging_power:
      name: PV1 power
      entity_category: diagnostic
      icon: mdi:solar-power

    # PV2 MPPT
    pv2_input_voltage:
      name: PV2 voltage
      entity_category: diagnostic
      icon: mdi:solar-panel
    pv2_input_current:
      name: PV2 current
      entity_category: diagnostic
      icon: mdi:current-dc
    pv2_charging_power:
      name: PV2 power
      entity_category: diagnostic
      icon: mdi:solar-power
          
    # Battery measurements
    battery_voltage:
      name: Battery voltage
      entity_category: diagnostic
      icon: mdi:battery
    battery_charging_current:
      name: Battery charging current
      entity_category: diagnostic
      icon: mdi:battery-charging
    battery_discharge_current:
      name: Battery discharge current
      entity_category: diagnostic
      icon: mdi:battery-minus

    # Battery configuration readback (with direct sync)
    battery_under_voltage:
      name: Battery under voltage
      id: battery_under_voltage
      entity_category: diagnostic
      icon: mdi:battery-alert
      on_value:
        then:
          - lambda: |-
              auto select_state = id(select_battery_under_voltage).state;
              auto sensor_value = str_sprintf("%.1f", x);
              if (select_state != sensor_value) {
                auto call = id(select_battery_under_voltage).make_call();
                call.set_option(sensor_value);
                call.perform();
              }

    battery_bulk_voltage:
      name: Battery bulk voltage
      entity_category: diagnostic
      icon: mdi:battery-charging-100

    battery_float_voltage:
      name: Battery float voltage
      id: battery_float_voltage
      entity_category: diagnostic
      icon: mdi:battery-charging-80
      on_value:
        then:
          - lambda: |-
              auto select_state = id(select_battery_float_charge_voltage).state;
              auto sensor_value = str_sprintf("%.1f", x);
              if (select_state != sensor_value) {
                auto call = id(select_battery_float_charge_voltage).make_call();
                call.set_option(sensor_value);
                call.perform();
              }

    battery_recharge_voltage:
      name: Battery recharge voltage
      id: battery_recharge_voltage
      entity_category: diagnostic
      icon: mdi:battery-charging-50
      on_value:
        then:
          - lambda: |-
              auto select_state = id(select_battery_recharge_voltage).state;
              auto sensor_value = str_sprintf("%.1f", x);
              if (select_state != sensor_value) {
                auto call = id(select_battery_recharge_voltage).make_call();
                call.set_option(sensor_value);
                call.perform();
              }

    battery_redischarge_voltage:
      name: Battery redischarge voltage
      id: battery_redischarge_voltage
      entity_category: diagnostic
      icon: mdi:battery-minus
      on_value:
        then:
          - lambda: |-
              auto select_state = id(select_battery_redischarge_voltage).state;
              auto sensor_value = str_sprintf("%.1f", x);
              if (select_state != sensor_value) {
                auto call = id(select_battery_redischarge_voltage).make_call();
                call.set_option(sensor_value);
                call.perform();
              }

    battery_type:
      name: Battery type
      entity_category: diagnostic
      icon: mdi:battery-heart

    current_max_ac_charging_current:
      name: Battery max ac charging current
      id: max_ac_charging_current
      entity_category: diagnostic
      icon: mdi:current-ac
      on_value:
        then:
          - lambda: |-
              auto select_state = id(select_max_ac_charging_current).state;
              auto sensor_value = str_sprintf("%.1f", x);
              if (select_state != sensor_value) {
                auto call = id(select_max_ac_charging_current).make_call();
                call.set_option(sensor_value);
                call.perform();
              }

    current_max_charging_current:
      id: max_charging_current
      name: Battery max charging current
      entity_category: diagnostic
      icon: mdi:current-dc
      on_value:
        then:
          - lambda: |-
              auto select_state = id(select_max_charging_current).state;
              auto sensor_value = str_sprintf("%.1f", x);
              if (select_state != sensor_value) {
                auto call = id(select_max_charging_current).make_call();
                call.set_option(sensor_value);
                call.perform();
              }

    # Output measurements
    ac_output_apparent_power:
      name: Output apparent power
      entity_category: diagnostic
      icon: mdi:lightning-bolt
    ac_output_active_power:
      name: Output active power
      entity_category: diagnostic
      icon: mdi:power-plug
    ac_output_voltage:
      name: Output voltage
      entity_category: diagnostic
      icon: mdi:sine-wave
    output_load_percent:
      name: Output load percent
      entity_category: diagnostic
      icon: mdi:gauge
    output_mode:
      name: Output mode
      entity_category: diagnostic
      icon: mdi:state-machine

# ============================================================================
# BINARY SENSORS (Diagnostic)
# ============================================================================
binary_sensor:
  - platform: pipsolar
    pipsolar_id: inverter0

    # Status
    charging_status:
      name: Charging status
      entity_category: diagnostic
      icon: mdi:battery-charging

    # Faults
    faults_present:
      name: Faults present
      entity_category: diagnostic
      icon: mdi:alert-circle
    fault_inverter_fault:
      name: Fault - inverter fault
      entity_category: diagnostic
      icon: mdi:alert
    fault_bus_over:
      name: Fault - bus over
      entity_category: diagnostic
      icon: mdi:alert
    fault_bus_under:
      name: Fault - bus under
      entity_category: diagnostic
      icon: mdi:alert
    fault_bus_soft_fail:
      name: Fault - bus soft fail
      entity_category: diagnostic
      icon: mdi:alert
    fault_opvshort:
      name: Fault - opv short
      entity_category: diagnostic
      icon: mdi:alert
    fault_inverter_voltage_too_low:
      name: Fault - voltage too low
      entity_category: diagnostic
      icon: mdi:alert
    fault_inverter_voltage_too_high:
      name: Fault - voltage too high
      entity_category: diagnostic
      icon: mdi:alert
    fault_inverter_over_current:
      name: Fault - over current
      entity_category: diagnostic
      icon: mdi:alert
    fault_inverter_soft_failed:
      name: Fault - inverter soft failed
      entity_category: diagnostic
      icon: mdi:alert
    fault_self_test_failed:
      name: Fault - self test failed
      entity_category: diagnostic
      icon: mdi:alert
    fault_op_dc_voltage_over:
      name: Fault - op dc voltage over
      entity_category: diagnostic
      icon: mdi:alert
    fault_battery_open:
      name: Fault - battery open
      entity_category: diagnostic
      icon: mdi:alert
    fault_current_sensor_failed:
      name: Fault - current sensor failed
      entity_category: diagnostic
      icon: mdi:alert
    fault_battery_short:
      name: Fault - battery short
      entity_category: diagnostic
      icon: mdi:alert
    fault_mppt_overload:
      name: Fault - MPPT overload
      entity_category: diagnostic
      icon: mdi:alert
    fault_dc_dc_over_current:
      name: Fault - dc-dc over current
      entity_category: diagnostic
      icon: mdi:alert
    fault_code:
      name: Fault - fault code
      entity_category: diagnostic
      icon: mdi:alert

    # Warnings
    warnings_present:
      name: Warnings present
      entity_category: diagnostic
      icon: mdi:alert-circle-outline
    warning_power_loss:
      name: Warning - power loss
      entity_category: diagnostic
      icon: mdi:power-plug-off
    warning_line_fail:
      name: Warning - line fail
      entity_category: diagnostic
      icon: mdi:transmission-tower-off
    warning_over_temperature:
      name: Warning - over temperature
      entity_category: diagnostic
      icon: mdi:thermometer-alert
    warning_fan_lock:
      name: Warning - fan lock
      entity_category: diagnostic
      icon: mdi:fan-off
    warning_battery_voltage_high:
      name: Warning - battery voltage high
      entity_category: diagnostic
      icon: mdi:battery-alert
    warning_battery_low_alarm:
      name: Warning - battery low alarm
      entity_category: diagnostic
      icon: mdi:battery-alert
    warning_battery_under_shutdown:
      name: Warning - batttery under voltage shutdown
      entity_category: diagnostic
      icon: mdi:battery-alert
    warning_battery_derating:
      name: Warning - battery derating
      entity_category: diagnostic
      icon: mdi:battery-alert
    warning_over_load:
      name: Warning - over load
      entity_category: diagnostic
      icon: mdi:alert
    warning_eeprom_failed:
      name: Warning - EEPROM failed
      entity_category: diagnostic
      icon: mdi:memory
    warning_power_limit:
      name: Warning - power limit
      entity_category: diagnostic
      icon: mdi:speedometer
    warning_pv_voltage_high:
      name: Warning - PV voltage high
      entity_category: diagnostic
      icon: mdi:solar-panel
    warning_mppt_overload:
      name: Warning - MPPT overload
      entity_category: diagnostic
      icon: mdi:alert
    warning_battery_too_low_to_charge:
      name: Warning - battery too low to charge
      entity_category: diagnostic
      icon: mdi:battery-alert
    warning_high_ac_input_during_bus_soft_start:
      name: Warning - high ac input during bus soft start
      entity_category: diagnostic
      icon: mdi:alert
    warning_battery_equalization:
      name: Warning - battery equalization
      entity_category: diagnostic
      icon: mdi:battery-sync

# ============================================================================
# TEXT SENSORS (Diagnostic)
# ============================================================================
text_sensor:
  - platform: debug
    reset_reason:
      name: Reset Reason
      entity_category: diagnostic

  - platform: template
    name: Device mode
    id: device_mode_str
    entity_category: diagnostic
    icon: mdi:state-machine

  - platform: pipsolar
    pipsolar_id: inverter0
    device_mode:
      name: Device mode int
      internal: true
      id: device_mode_int
      on_value:
        then:
          - lambda: |-
              auto dstate = "Bad apples";
              if (x == "B") dstate = "Battery";
              else if (x == "L") dstate = "Grid";
              else if (x == "P") dstate = "Power on";
              else if (x == "S") dstate = "Standby";
              else if (x == "F") dstate = "Fault";
              else if (x == "D") dstate = "Shutdown";
              id(device_mode_str).publish_state(dstate);

# ============================================================================
# LIGHTS (Diagnostic)
# ============================================================================
light:
  - platform: status_led
    name: Status LED
    entity_category: diagnostic
    icon: mdi:led-on
    pin:
      number: GPIO45
      inverted: True

# ============================================================================
# OUTPUTS (Internal - used by selects)
# ============================================================================
output:
  - platform: pipsolar
    pipsolar_id: inverter0
    battery_recharge_voltage:
      id: output_battery_recharge_voltage
      possible_values: [43.0,44.0,45.0,46.0,47.0,48.0,49.0]
    battery_float_voltage:
      id: output_battery_float_voltage
      possible_values: [52.0,52.1,52.2,52.3,52.4,52.5,52.6,52.7,52.8,52.9,53.0,53.1,53.2,53.3]
    battery_redischarge_voltage:
      id: output_battery_redischarge_voltage
      possible_values: [0.0,47.0,48.0,49.0,50.0,51.0,52.0,53.0,54.0,55.0]
    battery_under_voltage:
      id: output_battery_under_voltage
    current_max_ac_charging_current:
      id: output_max_ac_charging_current
      possible_values: [2.0,10.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.0]
    current_max_charging_current:
      id: output_max_charging_current
      possible_values: [10.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.0,110.0,120.0,130.0,140.0,150.0]
    output_source_priority:
      id: output_output_source_priority
    charger_source_priority:
      id: output_charger_source_priority

# ============================================================================
# SELECTS (Configuration)
# ============================================================================
select:
  # Log level control
  - platform: template
    name: Log Level
    id: select_log_level
    icon: mdi:math-log
    entity_category: config
    options:
      - "NONE"
      - "ERROR"
      - "WARN"
      - "INFO"
      - "DEBUG"
      - "VERBOSE"
      - "VERY_VERBOSE"
    initial_option: ${log_level_default}
    optimistic: true
    set_action:
      - if:
          condition:
            lambda: 'return x == "NONE";'
          then:
            - logger.set_level:
                level: NONE
      - if:
          condition:
            lambda: 'return x == "ERROR";'
          then:
            - logger.set_level:
                level: ERROR
      - if:
          condition:
            lambda: 'return x == "WARN";'
          then:
            - logger.set_level:
                level: WARN
      - if:
          condition:
            lambda: 'return x == "INFO";'
          then:
            - logger.set_level:
                level: INFO
      - if:
          condition:
            lambda: 'return x == "DEBUG";'
          then:
            - logger.set_level:
                level: DEBUG
      - if:
          condition:
            lambda: 'return x == "VERBOSE";'
          then:
            - logger.set_level:
                level: VERBOSE
      - if:
          condition:
            lambda: 'return x == "VERY_VERBOSE";'
          then:
            - logger.set_level:
                level: VERY_VERBOSE

  # Battery charging current limits
  - platform: template
    name: Max. charging current
    id: select_max_charging_current
    entity_category: config
    icon: mdi:current-dc
    options: ["10.0","20.0","30.0","40.0","50.0","60.0","70.0","80.0","90.0","100.0","110.0","120.0","130.0","140.0","150.0"]
    optimistic: true
    set_action:
      then:
        - lambda: |-
            const float target = std::stof(x.c_str());
            if (!isnan(id(max_charging_current).state) && fabsf(id(max_charging_current).state - target) <= 0.05f) {
              ESP_LOGI("select", "Skip set_level max_charging_current: already at %.1f", target);
              return;
            }
            id(output_max_charging_current).set_level(target);

  - platform: template
    name: Max. AC charging current
    id: select_max_ac_charging_current
    entity_category: config
    icon: mdi:current-ac
    options: ["2.0","10.0","20.0","30.0","40.0","50.0","60.0","70.0","80.0","90.0","100.0"]
    optimistic: true
    set_action:
      then:
        - lambda: |-
            const float target = std::stof(x.c_str());
            if (!isnan(id(max_ac_charging_current).state) && fabsf(id(max_ac_charging_current).state - target) <= 0.05f) {
              ESP_LOGI("select", "Skip set_level max_ac_charging_current: already at %.1f", target);
              return;
            }
            id(output_max_ac_charging_current).set_level(target);

  # Battery voltage thresholds
  - platform: template
    name: Battery under voltage
    id: select_battery_under_voltage
    entity_category: config
    icon: mdi:battery-alert
    options: ["40.0","41.0","42.0","43.0","44.0","45.0","46.0","47.0","48.0"]
    optimistic: true
    set_action:
      then:
        - lambda: |-
            const float target = std::stof(x.c_str());
            if (!isnan(id(battery_under_voltage).state) && fabsf(id(battery_under_voltage).state - target) <= 0.05f) {
              ESP_LOGI("select", "Skip set_level battery_under_voltage: already at %.1f", target);
              return;
            }
            id(output_battery_under_voltage).set_level(target);

  - platform: template
    name: Battery redischarge voltage
    id: select_battery_redischarge_voltage
    entity_category: config
    icon: mdi:battery-minus
    options: ["0.0","47.0","48.0","49.0","50.0","51.0","52.0","53.0","54.0","55.0"]
    optimistic: true
    set_action:
      then:
        - lambda: |-
            const float target = std::stof(x.c_str());
            if (!isnan(id(battery_redischarge_voltage).state) && fabsf(id(battery_redischarge_voltage).state - target) <= 0.05f) {
              ESP_LOGI("select", "Skip set_level battery_redischarge_voltage: already at %.1f", target);
              return;
            }
            id(output_battery_redischarge_voltage).set_level(target);

  - platform: template
    name: Battery recharge voltage
    id: select_battery_recharge_voltage
    entity_category: config
    icon: mdi:battery-charging-50
    options: ["43.0","44.0","45.0","46.0","47.0","48.0","49.0"]
    optimistic: true
    set_action:
      then:
        - lambda: |-
            const float target = std::stof(x.c_str());
            if (!isnan(id(battery_recharge_voltage).state) && fabsf(id(battery_recharge_voltage).state - target) <= 0.05f) {
              ESP_LOGI("select", "Skip set_level battery_recharge_voltage: already at %.1f", target);
              return;
            }
            id(output_battery_recharge_voltage).set_level(target);

  - platform: template
    name: Battery float charge voltage
    id: select_battery_float_charge_voltage
    entity_category: config
    icon: mdi:battery-charging-80
    options: ["52.0","52.1","52.2","52.3","52.4","52.5","52.6","52.7","52.8","52.9","53.0","53.1","53.2","53.3"]
    optimistic: true
    set_action:
      then:
        - lambda: |-
            const float target = std::stof(x.c_str());
            if (!isnan(id(battery_float_voltage).state) && fabsf(id(battery_float_voltage).state - target) <= 0.05f) {
              ESP_LOGI("select", "Skip set_level battery_float_voltage: already at %.1f", target);
              return;
            }
            id(output_battery_float_voltage).set_level(target);

  # Operating mode priorities
  - platform: pipsolar
    pipsolar_id: inverter0
    output_source_priority:
      id: inverter0_output_source_priority_select
      name: Output source priority
      entity_category: config
      icon: mdi:priority-high
      optionsmap:
        "Utility first": "POP00"
        "Solar/Utility/Battery": "POP01"
        "Solar/Battery/Utility": "POP02"
      statusmap:
        "0": "Utility first"
        "1": "Solar/Utility/Battery"
        "2": "Solar/Battery/Utility"

  - platform: pipsolar
    pipsolar_id: inverter0
    charger_source_priority:
      name: Charger Source Priority
      entity_category: config
      icon: mdi:battery-charging-wireless
      optionsmap:
        "Solar first": "PCP01"
        "Solar and utility": "PCP02"
        "Solar charging only": "PCP03"
      statusmap:
        "1": "Solar first"
        "2": "Solar and utility"
        "3": "Solar charging only"
